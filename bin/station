#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__filename="$(basename "${BASH_SOURCE[0]}")"
__parent_dir="$(cd "$(dirname "${__dir}")" && pwd)"

pull_behavior=true
cd_behavior=false
show_config_behavior=false
focus=""
skip=""

print_usage() {
cat << EOF
${__filename} -- workstation management

Default is to pull latest changes and attempt install.

Usage: ${__filename} [options]

Options:
  -l    Install local state without pulling first
  -f    List of setups to focus
  -s    List of setups to skip
  -c    Display 'cd' to the workstation directory
  -a    Display available setups
  -h    Display this help message
EOF
}

cd_helper() {
    echo -n "cd ${__parent_dir}" | pbcopy
    
    echo "cd ${__parent_dir}"
    echo
    echo "cmd+v. filled the command into your paste buffer."
}

show_configs() {
    source "${__parent_dir}/lib/print_helper.sh"
    # this is some hacky shit
    # eval the setup_ordered_list value from install.sh
    # this is the list of configs that can run that we want to display
    # use sed to multi-line match
    # start at variable name end at closing paren
    eval "$(sed -n '/readonly setup_ordered_list/,/)/p' install.sh)"
    print_setup_list "Available configurations" setup_ordered_list[@]
}

main() {
    cd "${__dir}/.."

    if [[ "$cd_behavior" = true ]]; then
        cd_helper
        exit 0
    fi

    if [[ $pull_behavior = true ]]; then
        git pull
        echo
    fi

    if [[ "$show_config_behavior" = true ]]; then
        show_configs
        exit 0
    fi

    WORKSTATION_FOCUS="$focus" WORKSTATION_SKIP="$skip" ./install.sh
}

while getopts "hlcf:s:a" opt; do
case "${opt}" in
    "h")
        print_usage
        exit 0
        ;;
    "l")
        pull_behavior=false
        ;;
    "c")
        cd_behavior=true
        ;;
    "a")
        show_config_behavior=true
        ;;
    "f")
        focus="$OPTARG"
        set +o nounset
        until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
            focus+=" $(eval "echo \${$OPTIND}")"
            OPTIND=$((OPTIND + 1))
        done
        set -o nounset
        ;;
    "s")
        skip="$OPTARG"
        set +o nounset
        until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
            skip+=" $(eval "echo \${$OPTIND}")"
            OPTIND=$((OPTIND + 1))
        done
        set -o nounset
        ;;
    "?")
        print_usage
        exit 1
        ;;
esac
done
shift $((OPTIND - 1))

main "$@"