#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
[[ "${TRACE:-}" ]] && set -o xtrace

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__filename="$(basename "${BASH_SOURCE[0]}")"
__root_dir="$(cd "$(dirname "${__dir}")" && pwd)"

source "${__root_dir}/install.sh"

pull_behavior=true
cd_behavior=false
show_config_behavior=false
profile_behavior=false
profile_args=()
focus_list=""
skip_list=""

print_usage() {
cat << EOF
${__filename} -- workstation management

Pull latest changes and install.

Usage: ${__filename} [options]

Options:
  -l    Install local state without pulling first
  -f    List of setups to focus
  -s    List of setups to skip
  -c    Display 'cd' to the workstation directory
  -a    Display available setups
  -p    Manage profiles for focusing/skipping setups

        Subcommands:
        -p list                      Display available and installed profiles
        -p install PROFILE_LIST      Install listed profiles to workstation
        -p uninstall PROFILE_LIST    Uninstall listed profiles from workstation

  -h    Display this help message
EOF
}

parse_options() {
    local OPTIND
    local OPTARG
    local opt

    while getopts "hlcf:s:ap:" opt; do
    case "${opt}" in
        "h")
            print_usage
            exit
            ;;
        "l")
            pull_behavior=false
            ;;
        "c")
            cd_behavior=true
            ;;
        "a")
            show_config_behavior=true
            ;;
        "f")
            focus_list="$OPTARG"
            set +o nounset
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [[ -z $(eval "echo \${$OPTIND}") ]]; do
                focus_list+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            set -o nounset
            ;;
        "s")
            skip_list="$OPTARG"
            set +o nounset
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [[ -z $(eval "echo \${$OPTIND}") ]]; do
                skip_list+=" $(eval "echo \${$OPTIND}")"
                OPTIND=$((OPTIND + 1))
            done
            set -o nounset
            ;;
        "p")
            profile_behavior=true
            profile_args=("$OPTARG")
            set +o nounset
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [[ -z $(eval "echo \${$OPTIND}") ]]; do
                profile_args+=("$(eval "echo \${$OPTIND}")")
                OPTIND=$((OPTIND + 1))
            done
            set -o nounset
            ;;
        "?")
            print_usage
            exit 1
            ;;
    esac
    done
}

cd_helper() {
    echo -n "cd ${__root_dir}" | pbcopy

    echo "cd ${__root_dir}"
    echo
    echo "cmd+v. filled the command into your paste buffer."
}

show_configs() {
    print_available_setups
}

git_pull() {
    git pull
    echo
}

print_available_profiles() {
    local indent="    "
    local profile

    echo "Available profiles:"
    for profile in "${available_profiles[@]:-(none)}"; do
        echo "${indent}${profile}"
    done
}

print_installed_profiles() {
    local indent="    "
    local profile

    echo "Installed profiles:"
    for profile in "${installed_profiles[@]:-(none)}"; do
        echo "${indent}${profile}"
    done
}

uninstall_profile() {
    local profile="$1"
    rm "${profile_install_dir}/${profile}.zsh"
}

profile_subcommand() {
    local subcommand="${profile_args[0]}"
    local arg
    local to_install
    local unmatched
    local match
    local profile

    case "$subcommand" in
        "list")
            print_available_profiles
            echo
            print_installed_profiles
            return 0
            ;;
        "install")
            if [[ ! "${#profile_args[@]}" -gt 1 ]]; then
                echo "'-p install' requires a list of profiles to install"
                print_usage
                return 1
            fi

            to_install=()
            unmatched=()

            for arg in "${profile_args[@]:1}"; do
                match=false

                for profile in "${available_profiles[@]}"; do
                    if [[ "$profile" == "$arg" ]]; then
                        match=true
                        break
                    fi
                done

                if [[ "$match" == true ]]; then
                    to_install+=("$arg")
                else
                    unmatched+=("$arg")
                fi
            done

            if [[ "${#unmatched[@]}" -gt 0 ]]; then
                echo "Aborting...nonexistent profiles: ${unmatched[*]}"
                return 1
            fi

            echo "Installing profiles: ${to_install[*]}"
            for profile in "${to_install[@]}"; do
                install_profile "$profile"
            done
            ;;
        "uninstall")
            if [[ ! "${#profile_args[@]}" -gt 1 ]]; then
                echo "'-p uninstall' requires a list of profiles to uninstall"
                print_usage
                return 1
            fi

            echo "Uninstalling profiles: ""${profile_args[@]:1}"

            for arg in "${profile_args[@]:1}"; do
                for profile in "${installed_profiles[@]:-}"; do
                    if [[ "$profile" == "$arg" ]]; then
                        uninstall_profile "$profile"
                    fi
                done
            done
            ;;
        *)
            echo "invalid option ${profile_args[*]}"
            return 1
            ;;
    esac
}

main() {
    parse_options "$@"

    cd "$__root_dir"

    if [[ "$cd_behavior" = true ]]; then
        cd_helper
        exit
    fi

    if [[ "$show_config_behavior" = true ]]; then
        if [[ "$pull_behavior" = true ]]; then
            git_pull || true
        fi

        show_configs
        exit
    fi

    if [[ "$pull_behavior" = true ]]; then
        git_pull
    fi

    if [[ "$profile_behavior" = true ]]; then
        init_profiles
        profile_subcommand
        exit $?
    fi

    [[ -n "${WORKSTATION_FOCUS:-}" ]] && focus_list+=" ${WORKSTATION_FOCUS}"
    [[ -n "${WORKSTATION_SKIP:-}" ]] && skip_list+=" ${WORKSTATION_SKIP}"

    WORKSTATION_FOCUS="$focus_list" WORKSTATION_SKIP="$skip_list" ./install.sh
}

main "$@"
